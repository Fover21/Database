
Redis


-----
为啥使用redis?

了解操作系统自带的buffer和cache有什么缺陷?
1.操作系统自带的内存管理机制
Linux 操作系统内存划分
RSS        page        anno page

page方式进行分配内存. 4K
基于固定大小内存划分方式,会产生内存碎片

OS:
	1.chain和chunk内存管理机制
	解决了内存分配需要较少的判断计算,内存分配更佳高效了
	2.buddy system
	内存回收和内存碎片整理
	基于LRU算法进行内存回收和整理
----------------------
memcache  \  redis
------------------------------

安装redis

1.下载redis

wget http://download.redis.io/releases/redis-3.2.10.tar.gz

2.拷贝软件到自己定制的目录
cp redis-3.2.10.tar.gz  /data/

3.解压,安装
cd /data/
tar xf redis-3.2.10.tar.gz 
cd redis-3.2.10
make
./redis-server &


4.使用配置文件
mkdir -p /data/6379
vim /data/6379/redis.conf

daemonize yes                          ---->后台运行
port 6379							   ---->端口
logfile /var/log/redis.log			   ---->日志位置
dbfilename dump.rdb					   ---->持久化文件名
dir /data/6379						   ---->持久化文件位置

环境变量设置
cd 
vim .bash_profile
export PATH=/data/redis-3.2.10/src:$PATH


source .bash_profile               ---->环境变量生效


重启redis
redis-cli shutdown            -->关闭redis

redis-server /data/6379/redis.conf


5.redis 安全认证
(1)默认安全控制
redis默认只允许本地登录,远程登录被屏蔽掉
In this mode connections are only accepted from the loopback interface. 
 
solutions: 
 4) Setup a bind address or an authentication password. 
 NOTE: You only need to do one of the above things in order for the server to start accepting connections from the outside.

vim /data/6379/redis.conf

bind 10.0.0.200  127.0.0.1
requirepass 123

	

重启生效

redis-cli shutdown            -->关闭redis

redis-server /data/6379/redis.conf

 
验证密码登录
(1)命令行验证
redis-cli -a 123
redis-cli -h 10.0.0.200 -a 123

(2)内部验证
redis-cli 
127.0.0.1:6379> auth 123




查看配置
CONFIG GET *
在线修改配置
CONFIG SET requirepass 123456

---------------------------------

6. redis持久化

RDB
基于时间点的快照
特点:速度快,还会有缓存失效的情况

AOF
只追加的日志文件,记录key:value 的变化过程
特点:极度安全


(1)RDB持久化的配置
vim /data/6379/redis.conf
dbfilename dump.rdb					  
dir /data/6379	
触发条件:
save 900 1  
save 300 10
save 60 10000

(2)AOF持久化配置
appendonly yes      ----->打开aof功能

appendfsync everysec ----->每秒持久化一次
appendfsync always  ------>每条变更的语句都会触发一次持久化


vim /data/6379/redis.conf

appendonly yes
appendfsync everysec


redis-cli -a 123 shutdown
redis-server /data/6379/redis.conf

------------------
7. redis 数据类型

key:value

value:

(1)string(字符串)

name:zhangsan

(2)hash(字典)
stu:{id:101
name:zhsnagsan 
age:20}

(3)list (列表)
list1:[a b c]
	   0 1 2
(4)set (集合)
key1:{a b c }
key2:{a x y}

(5)sorted set(有序集合)

key1 :{socre zhansan   socre lisi}
			  0              1
---------------------------------